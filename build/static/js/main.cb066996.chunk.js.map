{"version":3,"sources":["images/bg.png","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","fetchQuizQuestions","amount","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","category","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","TOTAL_QUESTIONS","setTOTAL_QUESTIONS","qset","setQset","startTrivia","window","location","reload","alert","newQuestions","type","placeholder","min","autoFocus","onChange","e","Number","target","length","undefined","currentTarget","prev","answerObject","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb066996.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.d6988bbc.png\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\n\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number): Promise<QuestionsState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\n    difficulty: question.difficulty\n  }))\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 10px solid #000000;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n    correct\n      ? 'linear-gradient(90deg, #0af777, #4deb96)'\n      : !correct && userClicked\n        ? 'linear-gradient(90deg, #f70e0a, #4d0402)'\n        : 'linear-gradient(90deg, #165dd9, #2916a1)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n  category: string;\n  difficulty: string\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n  category,\n  difficulty\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <p dangerouslySetInnerHTML={{ __html: \"Category-> \" + category }} />\n    <p dangerouslySetInnerHTML={{ __html: \"Difficulty-> \" + difficulty }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/bg.png';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: Sans-seirf;\n    background: #ECF0F1;\n    font-weight: 400;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #F4F6F7);\n    font-size: 30px;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(90deg, #3261e3, #6a86d4);\n    border: 2px black;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 5px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n// Components\nimport QuestionCard from './components/QuestionCard';\n// types\nimport { QuestionsState } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n// import React from 'react';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [TOTAL_QUESTIONS, setTOTAL_QUESTIONS] = useState<number>(10);\n  const [qset, setQset] = useState(false);\n\n  const startTrivia = async () => {\n    if (!gameOver) window.location.reload();\n    else {\n      if (TOTAL_QUESTIONS < 1) {\n        alert(\"Atleast one question is needed to start trivia!!\")\n        return\n      }\n      setQset(true);\n      setLoading(true);\n      setGameOver(false);\n      const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS);\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n    }\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>The Queen's English Quiz</h1>\n        {!qset ? <label>Enter No. of Questions:\n          <input\n            type=\"number\"\n            placeholder='10'\n            min=\"1\"\n            autoFocus\n            value={TOTAL_QUESTIONS}\n            onChange={(e) => { setTOTAL_QUESTIONS(Number(e.target.value)) }}\n          />\n        </label> : null}\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className='start' onClick={startTrivia}>\n            {gameOver ? \"Start\" : \"Restart\"}\n          </button>\n        ) : null}\n        {!gameOver ? <p className='score'>Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n            category={questions[number].category}\n            difficulty={questions[number].difficulty}\n\n          />\n        )}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className='next' onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}